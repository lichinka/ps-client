Instructions for Windows systems
================================

Setting up the virtual environment
----------------------------------
To set up the virtual environment for the PS client, follow these steps:

    X:\> virtualenv --distribute virtual
    X:\> cd virtual
    X:\virtual> .\Scripts\activate.bat
    X:\virtual> .\Scripts\pip.exe install --requirement=requirements_Win32.txt

where 'requirements_Win32.txt' is the file saved along in the 'src' directory.
Up to here there should be no errors. Now do:

    X:\virtual> .\Scripts\easy_install.exe [dist]\pywin32-217.win32-py2.7.exe
    X:\virtual> .\Scripts\easy_install.exe [dist]\netifaces-0.5-py2.7-win32.egg

or

    X:\virtual> .\Scripts\easy_install.exe [dist]\pywin32-217.win-amd64-py2.7.exe
    X:\virtual> .\Scripts\easy_install.exe [dist]\netifaces-0.5-py2.7-win-amd64.egg

depending on whether you have a 32 or 64-bit Python installation (not Windows!).
[dist] is the 'dist' directory available with the PS Client source distribution.-

Testing the code
----------------
Still within the activated virtual environment, run:

    X:\virtual> cd [src] 
    [src]> X:\virtual\Scripts\py.test.exe

where [src] is the source directory of the PS Client source distribution.-

Starting the daemon
-------------------
The daemon is implemented as a Flask web app.
From inside the activated virtual environment, start it by running:

    X:\virtual> cd [src] 
    [src]> X:\virtual\Scripts\python.exe daemon.py 
     * Running on http://0.0.0.0:5000/
     * Restarting with reloader

where [src] is the source directory of the PS Client source distribution.-



Instructions for Linux systems
==============================

Setting up the virtual environment
----------------------------------
To set up the virtual environment for the PS client, follow these steps:

    $> virtualenv --no-site-packages --python=/usr/bin/python2.7 psclient
    $> virtualenv --relocatable psclient
    $> cd psclient
    $> source ./bin/activate
    (psclient)$> ./bin/pip install --requirement=requirements.txt

where 'requirements.txt' is the file saved along this README.-

Installing DBus
---------------
The dbus-python package, also used by the client application, requires manual 
compilation since the PIP installer fails to execute.

    (psclient)$> ./bin/pip install dbus-python==1.1.1

            ( ... this fails ...)

    (psclient)$> cd bin
    (psclient)$> ln -s /usr/bin/python2-config python-config
    (psclient)$> cd ../build/dbus-python
    (psclient)$> sh configure --prefix=${VIRTUAL_ENV} --exec-prefix=${VIRTUAL_ENV}
    (psclient)$> make
    (psclient)$> make install

To test the correct installation of the DBus library, use the interpreter:

    (psclient)$> python

    >>> import dbus
    
and there should be no exception. You may now delete the 'build' directory.-

Installing UPower
-----------------
Just install the package with your favorite package manager. 
Test it by running:

    $> upower -d
    Daemon:
      daemon-version:  0.9.17
      can-suspend:     yes
      can-hibernate    yes
      on-battery:      no
      on-low-battery:  no
      lid-is-closed:   no
      lid-is-present:  no
      is-docked:       no

ConsoleKit
----------
From inside your WM or DE, check that ConsoleKit is running and its
configuration has been correctly setup:

    $> ck-list-sessions 
    Session1:
        unix-user = '1000'
        realname = 'Lucas Benedicic'
        seat = 'Seat1'
        session-type = ''
        active = TRUE
        x11-display = ':0'
        x11-display-device = '/dev/tty7'
        display-device = '/dev/tty1'
        remote-host-name = ''
        is-local = TRUE
        on-since = '2012-08-05T11:13:10.706094Z'
        login-session-id = '1'

Some of the displayed information will differ. The important lines are

        active = TRUE
        is-local = TRUE

User's permissions
------------------
Since suspending, hibernating and powering the computer off are administrative
tasks, you should make sure your everyday user has permission to do so, i.e. 
the user is member of the administrative group indicated here:

    $> cat /etc/polkit-1/localauthority.conf.d/50-localauthority.conf
    # Configuration file for the PolicyKit Local Authority.
    #
    # DO NOT EDIT THIS FILE, it will be overwritten on update.
    #
    # See the pklocalauthority(8) man page for more information
    # about configuring the Local Authority.
    #

    [Configuration]
    AdminIdentities=unix-group:admin

In this case the user should be member of the group 'admin'.
Check this by running (from the user's prompt):

    $> groups
    ... admin ...

Testing the code
----------------
From the 'psclient' root directory, run:

    (psclient)$> py.test

Starting the daemon
-------------------
The daemon is implemented as a CherryPy web app.
From inside the activated virtual environment, start it by running:

    (psclient)$> python main.py 
    ...

